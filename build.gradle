buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id "java"
    id 'application'
	id 'net.saliman.cobertura' version '2.3.2'
    id "org.sonarqube" version "2.2.1"
}

apply plugin: 'maven-publish'
apply plugin: 'docker'
apply plugin: 'com.github.johnrengelman.shadow'
sourceCompatibility = 1.8
applicationDefaultJvmArgs = ["-Djava.library.path=.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib"]

project.ext {
    apiVersion = 0.20
    configPath = "$rootProject.projectDir/config/"
    dropwizardVersion = "1.1.0"
    dropwizardFlywayVersion = "1.0.0-1"
    metricsVersion = "3.1.0"
    dropwizardSwaggerVersion = "1.0.0-1"
    mainclass = "gov.ca.cwds.rest.ApiApplication" 
}

def dockerTag = apiVersion + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')
version = apiVersion
mainClassName = mainclass

repositories {
    mavenCentral()
    maven {
        url "http://maven2.cwds.tabordasolutions.net"
    }
}

shadowJar {
  classifier = 'dist'
  baseName = 'api'
  mergeServiceFiles()	
  manifest {
    attributes 'Main-Class': mainclass
  }
  version = ''
}

dependencies {
	// Dropwizard-guice 1.0.0.2 conflicts with jersey-client 2.25.
	// Exclude transitive dependencies.
	compile ('gov.ca.cwds.api:api-core:0.20.154') {
	    exclude group: 'org.glassfish.jersey.core'
	}
	
	compile group: "io.dropwizard", name: "dropwizard-client", version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-hibernate", version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-views", version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-views-mustache", version: dropwizardVersion
	compile group: 'io.dropwizard', name: 'dropwizard-assets', version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-testing", version: dropwizardVersion
	compile group: "io.dropwizard.metrics", name: "metrics-core", version: metricsVersion
    compile group: "io.dropwizard.modules", name: "dropwizard-flyway", version: dropwizardFlywayVersion

    compile group: "org.glassfish.jersey.ext", name: "jersey-declarative-linking", version: "2.23.2"
	compile group: "javax.el", name: "javax.el-api", version: "2.2.4"
	compile group: "org.glassfish.web", name: "javax.el", version: "2.2.4"
	compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.8.3'
    compile group: 'org.elasticsearch', name: 'elasticsearch', version: '2.4.4'
	compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.22'

	compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.25.1'
	compile group: 'com.hubspot.dropwizard', name: 'dropwizard-guice', version: '1.0.6.0'

	compile 'com.fasterxml.jackson.module:jackson-module-guice:2.8.2'
	compile group: "com.smartystreets.api", name: "smartystreets-java-sdk", version: "1.0.7"
	compile group: 'org.secnod.dropwizard', name: 'dropwizard-shiro', version: '0.2.0'

    compile fileTree(dir: 'lib', include: ['*.jar'])
    
	compile group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.9'
	compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.9'
    compile group: "org.postgresql", name: "postgresql", version: "9.4.1208.jre7"

    compile group: 'org.json', name: 'json', version: '20090211'
    
	// testCompile 'org.glassfish.jersey.core:jersey-client:2.26-b01'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
 	testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
	testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
		exclude group: 'javax.servlet', module: 'javax.servlet-api'
		exclude group: 'junit', module: 'junit'
	}
	
	// https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
	testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'
	testCompile group: "com.github.fge", name: "json-schema-validator", version: "2.2.6"
}

tasks.withType(Test) {
    enableAssertions = true
    
    // These don't work. Docs mistaken?
    // jvmArgs '-Djava.library.path=.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    // jvmArgs '-Djava.library.path=.:./lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'

    // Set system properties for the test JVM(s).
    // Gradle passed the literal string '$rootProject.projectDir' ???
    // systemProperty 'java.library.path', '.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    systemProperty 'java.library.path', '.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib'
}

test {
    exclude '**/*IT*'

    // These don't work. Docs mistaken?
    // jvmArgs '-Djava.library.path=.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'

    // Set system properties for the test JVM(s).
    // Gradle passes the literal string '$rootProject.projectDir' ???
    // systemProperty 'java.library.path', '.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    systemProperty 'java.library.path', '.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib'
}

task integrationTest(type: Test, dependsOn: testClasses) {
    include '**/*IT*'
    exclude '**/*Test*'
    //exclude '**/*'
}

run {
    args "server", configPath + "api.yml"
}

cobertura {
	// See story #137202471 about the mounting evils of Cobertura ... :-)
	// Cobertura does not recognize Java 8 features, like interface defaults or lambda.

	coverageFormats = ['xml', 'html']
	coverageIgnoreTrivial = true
	
	coverageExcludes = ['org.slf4j.Logger.*', '.*gov\\.ca\\.cwds\\.data\\.persistence\\.cms\\..*SystemCodeCache.*', '.*gov\\.ca\\.cwds\\.data\\..*BatchBucket.*', '.*gov\\.ca\\.cwds\\.data\\..*ApiAddressAware.*']
	coverageIgnores   = ['org.slf4j.Logger.*', '.*gov\\.ca\\.cwds\\.data\\.persistence\\.cms\\..*SystemCodeCache.*']
	coverageReportDir = new File("$buildDir/reports/cobertura")
}

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      groupId 'gov.ca.cwds.api'
      artifactId 'api'
        version version + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')
    }
  }
  repositories {
    maven {
      //TODO : set to http url
      url "file:///usr/share/nginx/html/maven2"
    }
  }
}

task copyConfig(type: Copy) {
    from 'config'
    into 'build/docker/config'
}

task copyDist(type: Copy, dependsOn: shadowJar) {
    from 'build/libs'
    into 'build/docker/libs'
}

task apidocker(type: Docker,  dependsOn: [copyConfig, copyDist] ) {
    dockerfile = "Dockerfile"
    project.group = "cwds"
    applicationName = "api"
    tagVersion = version + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')
}

task createDockerImage(type:Exec, dependsOn: shadowJar) {
  commandLine 'docker',  'build',  '-t',  'cwds/api', '.'
}

task tagDockerImage(type:Exec, dependsOn: createDockerImage) {
  commandLine 'docker',  'tag',  'cwds/api',  "cwds/api:$dockerTag"
}

task pushDockerLatest(type:Exec, dependsOn: createDockerImage) {
  commandLine 'docker',  'push',  'cwds/api:latest'
}

task pushDockerVersionTagged(type:Exec, dependsOn: tagDockerImage) {
  commandLine 'docker',  'push',  "cwds/api:$dockerTag"
}
task publishDocker(dependsOn: [pushDockerVersionTagged, pushDockerLatest]) {
   doLast { 
	 println 'Published'
   }
}
