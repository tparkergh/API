buildscript {
    repositories {
        jcenter()
        maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id "java"
    id 'application'
    id "org.sonarqube" version "2.2.1"
    id 'com.github.jk1.dependency-license-report' version '0.3.14'
}

apply plugin: 'maven-publish'
apply plugin: 'docker'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
applicationDefaultJvmArgs = ["-Djava.library.path=.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib"]

project.ext {
    apiVersion = 0.32
    configPath = "$rootProject.projectDir/config/"
    dropwizardVersion = "1.1.0"
    dropwizardFlywayVersion = "1.0.0-1"
    metricsVersion = "3.1.0"
    dropwizardSwaggerVersion = "1.0.0-1"
    mainclass = "gov.ca.cwds.rest.ApiApplication" 
    elasticsearchVersion = "5.4.0"
    log4jVersion = "2.8.2"
}

def dockerTag = apiVersion + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')
version = apiVersion
mainClassName = mainclass

repositories {
    mavenCentral()
    maven {
        url "http://maven2.cwds.tabordasolutions.net"
        // url "https://plugins.gradle.org/m2/"
    }
}

shadowJar {
  classifier = 'dist'
  baseName = 'api'
  mergeServiceFiles()	
  manifest {
    attributes 'Main-Class': mainclass
  }
  version = ''
}

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      groupId 'gov.ca.cwds.api'
      artifactId 'api'
        version version + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')
    }
  }
  repositories {
    maven {
      // TODO: set to http url
      url "file:///usr/share/nginx/html/maven2"
    }
  }
}

dependencies {
	compile group: "io.dropwizard", name: "dropwizard-client", version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-hibernate", version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-views", version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-views-mustache", version: dropwizardVersion
	compile group: 'io.dropwizard', name: 'dropwizard-assets', version: dropwizardVersion
	compile group: "io.dropwizard", name: "dropwizard-testing", version: dropwizardVersion
	compile group: "io.dropwizard.metrics", name: "metrics-core", version: metricsVersion
    compile group: "io.dropwizard.modules", name: "dropwizard-flyway", version: dropwizardFlywayVersion

    compile group: "org.glassfish.jersey.ext", name: "jersey-declarative-linking", version: "2.23.2"
	compile group: "javax.el", name: "javax.el-api", version: "2.2.4"
	compile group: "org.glassfish.web", name: "javax.el", version: "2.2.4"
	compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.8.3'
	
    // ES 5.x:
    compile group: 'org.elasticsearch', name: 'elasticsearch', version: elasticsearchVersion
    compile group: 'org.elasticsearch.client', name: 'transport', version: elasticsearchVersion

	// Dropwizard-guice 1.0.0.2 conflicts with jersey-client 2.25.
	// Exclude transitive dependencies.
	compile ('gov.ca.cwds.api:api-core:3.6.461') {
	    exclude group: 'org.glassfish.jersey.core'
	}

	// LOGGING:	
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
  	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
	compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4jVersion
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.1'
	compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.25'
	compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

	compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.25.1'
	compile group: 'com.hubspot.dropwizard', name: 'dropwizard-guice', version: '1.0.6.0'

	compile 'com.fasterxml.jackson.module:jackson-module-guice:2.8.2'
	compile group: "com.smartystreets.api", name: "smartystreets-java-sdk", version: "1.0.7"
	compile group: 'org.secnod.dropwizard', name: 'dropwizard-shiro', version: '0.2.0'

    compile fileTree(dir: 'lib', include: ['*.jar'])
    
	compile group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.9'
	compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.9'
    compile group: "org.postgresql", name: "postgresql", version: "9.4.1208.jre7"
    compile group: 'org.json', name: 'json', version: '20090211'

	// testCompile 'org.glassfish.jersey.core:jersey-client:2.26-b01'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
 	testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
	testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
		exclude group: 'javax.servlet', module: 'javax.servlet-api'
		exclude group: 'junit', module: 'junit'
	}
	
	// https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
	testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'
	testCompile group: "com.github.fge", name: "json-schema-validator", version: "2.2.6"
	
	// https://mvnrepository.com/artifact/com.google.errorprone/error_prone_annotations
	testCompile group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.0.19'
}

task printProps << {
    println System.properties['DB_CMS_JDBC_URL']
}

tasks.withType(Test) {
    enableAssertions = true
    systemProperties project.properties.subMap(["DB_CMS_JDBC_URL", "DB_CMS_PASSWORD", "DB_CMS_SCHEMA", "DB_CMS_USER", "DB_NS_JDBC_URL", "DB_NS_PASSWORD", "DB_NS_SCHEMA", "DB_NS_USER"])

    // These don't work. Docs mistaken?
    // jvmArgs '-Djava.library.path=.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    // jvmArgs '-Djava.library.path=.:./lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'

    // Set system properties for the test JVM(s).
    // Gradle passed the literal string '$rootProject.projectDir' ???
    // systemProperty 'java.library.path', '.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    systemProperty 'java.library.path', '.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib'
}

test {
    exclude '**/*IT*'

    // These don't work. Docs mistaken?
    // jvmArgs '-Djava.library.path=.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'

    // Set system properties for the test JVM(s).
    // Gradle passes the literal string '$rootProject.projectDir' ???
    // systemProperty 'java.library.path', '.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    systemProperty 'java.library.path', '.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib'
    environment 'LOCAL_DEV', 'true'
}

task integrationTest(type: Test, dependsOn: testClasses) {
    include '**/*IT*'
    exclude '**/*Test*'
    // systemProperties project.properties.subMap(["DB_CMS_JDBC_URL", "DB_CMS_PASSWORD", "DB_CMS_SCHEMA", "DB_CMS_USER", "DB_NS_JDBC_URL", "DB_NS_PASSWORD", "DB_NS_SCHEMA", "DB_NS_USER"])
}

run {
    args "server", configPath + "api.yml"
}

jacocoTestReport {
  reports {
      xml.enabled false
      csv.enabled false
      html.destination "${buildDir}/jacocoHtml"
  }
}

sonarqube {
  properties {
      property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
      property "sonar.jacoco.itReportPath", "${buildDir}/jacoco/integrationTest.exec"
     // property "sonar.host.url", "http://sonarqube.cwds.tabordasolutions
     //        .net/dashboard?id=cwds%3Aapi"
  }
}

licenseReport {
    renderer = new CWDSReportRenderer()
}

task libLicenceFolders(type: Copy){
    from 'build/reports/dependency-license'
    into 'legal/licenses'
    exclude "licenses.html"
    exclude "licenses.txt"
}

task libLicenseReportFiles(type: Copy){
    from 'build/reports/dependency-license'
    into 'legal'
    include "licenses.html"
    include "licenses.txt"
}

task libLicenseReport(dependsOn:[generateLicenseReport, libLicenceFolders,
                                 libLicenseReportFiles ] ){
}

task copyConfig(type: Copy) {
    from 'config'
    into 'build/docker/config'
}

task copyDist(type: Copy, dependsOn: shadowJar) {
    from 'build/libs'
    into 'build/docker/libs'
}

task apidocker(type: Docker,  dependsOn: [copyConfig, copyDist] ) {
    dockerfile = "Dockerfile"
    project.group = "cwds"
    applicationName = "api"
    tagVersion = version + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')
}

task createDockerImage(type:Exec, dependsOn: shadowJar) {
  commandLine 'docker',  'build',  '-t',  'cwds/api', '.'
}

task tagDockerImage(type:Exec, dependsOn: createDockerImage) {
  commandLine 'docker',  'tag',  'cwds/api',  "cwds/api:$dockerTag"
}

task pushDockerLatest(type:Exec, dependsOn: createDockerImage) {
  commandLine 'docker',  'push',  'cwds/api:latest'
}

task pushDockerVersionTagged(type:Exec, dependsOn: tagDockerImage) {
  commandLine 'docker',  'push',  "cwds/api:$dockerTag"
}

task publishDocker(dependsOn: [pushDockerVersionTagged, pushDockerLatest]) {
   doLast { 
	 println 'Published'
   }
}
//==================================================================================================
// Custom Groovy classes for Licence Reports.
// Move to own classes outside of build.
import org.gradle.api.Project;
import com.github.jk1.license.License;
import com.github.jk1.license.LicenseReportPlugin;
import com.github.jk1.license.ManifestData;
import com.github.jk1.license.ModuleData;
import com.github.jk1.license.PomData;
import com.github.jk1.license.ProjectData;
import com.github.jk1.license.render.ReportRenderer;

public class CWDSReportRenderer implements ReportRenderer {

    @Override
    void render(ProjectData data) {
        new CWDSTextReportRenderer().render(data)
        new CWDSHtmlReportRenderer().render(data)

    }
}
public class CWDSTextReportRenderer implements ReportRenderer {

  private Project project
  private LicenseReportPlugin.LicenseReportExtension config
  private File output
  private int counter
  private String fileName

  CWDSTextReportRenderer(String filename = 'licenses.txt'){
      this.fileName = filename
  }
  public void render(ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        output.text = """
================================================================
       Dependency License Report for $project.name ${if (!'unspecified'.equals(project.version))
            project.version else ''}
================================================================
"""
      output << "\n\n"
        printDependencies(data)
        output << """
This report was generated at ${new Date()}.
"""
    }

    private void printDependencies(ProjectData data) {
        data.allDependencies.sort().each {
            printDependency(it)
        }
    }

    private String printDependency(ModuleData data) {
        boolean projectUrlDone = false
        if (data.name) output << "License Name: $data.name "
        if (data.version) output << " Version: $data.version\n\n"

        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            output << "No license information found\n\n"
            return
        }

        if (!data.manifests.isEmpty() && !data.poms.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            PomData pomData = data.poms.first()
            if (manifest.url && pomData.projectUrl && manifest.url == pomData.projectUrl) {
                output << "Project URL: $manifest.url\n\n"
                projectUrlDone = true
            }
        }

        if (!data.manifests.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            if (manifest.url && !projectUrlDone) {
                output << "Manifest Project URL: $manifest.url\n\n"
            }
            if (manifest.license) {
                if (manifest.license.startsWith("http")) {
                    output << "Manifest license URL: $manifest.license\n\n"
                } else if (manifest.hasPackagedLicense) {
                    output << "Packaged License File: $manifest.license\n\n"
                } else {
                    output << "Manifest License: $manifest.license (Not packaged)\n\n"
                }
            }
        }

        if (!data.poms.isEmpty()) {
            PomData pomData = data.poms.first()
            if (pomData.projectUrl && !projectUrlDone) {
                output << "POM Project URL: $pomData.projectUrl\n\n"
            }
            if (pomData.licenses) {
                pomData.licenses.each { License license ->
                    output << "POM License: $license.name"
                    if (license.url) {
                        if (license.url.startsWith("http")) {
                            output << " - $license.url\n\n"
                        } else {
                            output << "License: $license.url\n\n"
                        }
                    }
                }
            }
        }
        if (!data.licenseFiles.isEmpty() && !data.licenseFiles.first().files.isEmpty()) {
            output << 'Embedded license: '
            output << "\n\n"
            output << data.licenseFiles.first().files.collect({ "                    " +
                    "****************************************\n\n \t\t\t$it\n\n" + new
                    File("$config.outputDir/$it").text + "\n"}).join('')
        }
        output <<
                "\n\n================================================================================\n\n"
    }
}

import com.github.jk1.license.LicenseReportPlugin.LicenseReportExtension
class CWDSHtmlReportRenderer implements ReportRenderer {

    private Project project
    private LicenseReportExtension config
    private File output
    private int counter
    private String fileName
    private String libLicenseUrl

    CWDSHtmlReportRenderer(String libLicenseUrl = "licenses",String fileName = 'licenses.html') {
        this.fileName = fileName
        this.libLicenseUrl = libLicenseUrl
    }

    public void render(ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        output.text = """
<html>
<head>
<title>Dependency License Report for $project.name</title>
<style>
    table, th, td { border: 1px solid black; }
</style>
<head>
<body>
<h1>Dependency License Report for $project.name ${if (!'unspecified'.equals(project.version)) project.version else ''}</h1>
"""
        printDependencies(data)
        output << """
<hr />
<p id="timestamp">This report was generated at <em>${new Date()}</em>.</p>
</body>
</html>
"""
    }

    private void printDependencies(ProjectData data) {
        output << "<table >"
        output << "<hr><th>name</th><th>project url</th><th>license</th>" +
                       "<th>Embeded License</th></hr>"
        data.allDependencies.sort().each {
            output << "<tr>"
            printDependency(it)
            output << "</tr>"
        }
        output << "</table>"
    }

    private String printDependency(ModuleData data) {
        boolean projectUrlDone = false
        String name = ""
        String urls = ""
        String licenses = ""
        name += "<p><strong> ${++counter}.</strong> "
        if (data.name) name += "$data.name "
        name += "</p>"

        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            name += "<p><strong>No license information found</strong></p>"
        }

        if (!data.manifests.isEmpty() && !data.poms.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            PomData pomData = data.poms.first()
            if (manifest.url && pomData.projectUrl && manifest.url == pomData.projectUrl) {
                urls += "<p> <code><a href=\"$manifest.url\">$manifest.url</a></code></p>"
                projectUrlDone = true
            }
        }

        if (!data.manifests.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            if (manifest.url && !projectUrlDone) {
                urls += "<p> <code><a href=\"$manifest.url\">$manifest.url</a></code></p>"
            }
            if (manifest.license) {
                if (manifest.license.startsWith("http")) {
                    licenses += "<p><strong>Manifest license URL:</strong> <a href=\"$manifest.license\">$manifest.license</a></p>"
                } else if (manifest.hasPackagedLicense) {
                    licenses += "<p><strong>Manifest license URL:</strong> <a href=\"$manifest.url\">$manifest.license</a></p>"
                } else {
                    licenses += "<p><strong>Manifest license URL:</strong>$manifest.license (Not packaged)</p>"
                }
            }
        }

        if (!data.poms.isEmpty()) {
            PomData pomData = data.poms.first()
            if (pomData.projectUrl && !projectUrlDone) {
                urls += "<p> <code><a href=\"$pomData.projectUrl\">$pomData.projectUrl</a></code></p>"
            }
            if (pomData.licenses) {
                pomData.licenses.each { License license ->
                    licenses += "<p><strong>POM License: $license.name</strong>"
                    if (license.url) {
                        if (license.url.startsWith("http")) {
                            licenses += " - <a href=\"$license.url\">$license.url</a>"
                        } else {
                            licenses += "<p> $license.url</p>"
                        }
                    }
                }
            }
        }

        output << "<td>$name</td>"
        output << "<td>$urls</td>"
        output << "<td>$licenses</td>"

        output << "<td>"
        if (!data.licenseFiles.isEmpty() && !data.licenseFiles.first().files.isEmpty()) {
            output << '<p>'
            output << data.licenseFiles.first().files.collect({ "<a " +
                    "href=\"$libLicenseUrl/$it\">$it</a>" +
                    " " +
                    "" }).join('')
            output << '</p>'
        }
        output << "</td>"
    }
}
